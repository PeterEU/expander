-- BOTTLEalt

specs: 	    BOOL
constructs: turt pile J 
preds:      loop 
defuncts:   target piles
fovars:     p q ps qs

axioms:

  (x < 3  ==> (x,y) -> (3,y))		-- links auffuellen
& (y < 5  ==> (x,y) -> (x,5))		-- rechts auffuellen
& (x > 0  ==> (x,y) -> (0,y))		-- links leeren
& (y > 0  ==> (x,y) -> (x,0))		-- rechts leeren
& (x > 0 & x+y = z & z <= 5 
	  ==> (x,y) -> (0,z))     	-- leeren von links nach rechts
& (y > 0 & x+y = z & z <= 3  
          ==> (x,y) -> (z,0))     	-- leeren von rechts nach links
& (x < 3 & x+y = z & z > 3   
          ==> (x,y) -> (3,z-3))   	-- auffuellen von rechts nach links
& (y < 5 & x+y = z & z > 5  
          ==> (x,y) -> (z-5,5)) 	-- auffuellen von links nach rechts
& (x > 0 ==> (x,y) -> branch(map(fun(z,(0,z)))(filtereq(x+y)[1..5])))
			  	        -- leeren von links nach rechts
& (y > 0 ==> (x,y) -> branch(map(fun(z,(z,0)))(filtereq(x+y)[1..3])))    	
				        -- leeren von rechts nach links
& (x < 3 ==> (x,y) -> branch(map(fun(z,(3,z-3)))(filtereq(x+y)[4..8]))) 
					-- auffuellen von rechts nach links
& (y < 5 ==> (x,y) -> branch(map(fun(z,(z-5,5)))(filtereq(x+y)[6..8])))
					-- auffuellen von links nach rechts

& (x+y = 4   ==> target(x,y) = true)
& (x+y =/= 4 ==> target(x,y) = false)

& (target(p) = true ==> loop(p,ps,ps++[p]))
& (target(p) = false & length(ps) < 7 & p -> q & q `NOTin` p:ps
      	            ==> (loop(p,ps,qs) <=== loop(q,ps++[p],qs)))
 
& piles(x,y) = [pile(x,3),J(2),pile(y,5),J(3)] 
    
conjects:

  Any ps: (loop((0,0),[],ps) & turt(concat(map(piles)(ps))) = z) 

& turt(concat(map(piles)[(0,0),(3,0),(0,3),(3,3),(1,5),(1,0),(0,1),(3,1)])) = z

