-- trans2

-- Steffen, Logische Prozessspezifikationen, 1995
-- Beispiele 1.48, 1.50, 1.51

specs:		modal
preds:		X Y three THREE six seven' Sat SatL
copreds:        NOTTHREE four five seven eight
constructs: 	a A B
defuncts:   	drawS
hovars:		X Y

axioms:

states == [1] & labels == [a] & atoms == [A,B] &

(1,a) -> 1<+>2 & (2,a) -> 3 & (3,a) -> 1<+>4 & (4,a) -> 4 &

A -> branch[2,3,4] & (B,a) -> 3 &

(Sat(at)$st <==> at `in` out$st) &
(SatL(at,lab)$st <==> at `in` outL(st)$lab) &

(three    <==> MU X.(a#(A\/X))) &		
(four     <==> NU X.(a#(A/\X))) &
(five     <==> NU X.((a#X)/\six)) &
(six      <==> MU X.(A\/(a#X))) &
(seven    <==> NU X.(MU Y.(a#((A/\X)\/Y)))) &
(eight    <==> NU X.(a#X)) &

(THREE(st)    <=== (a#(Sat(A)\/THREE))(st)) &			
(NOTTHREE(st) ===> (a<>(not(Sat(A))/\NOTTHREE))(st)) &	
(four(st)     ===> (a#(Sat(A)/\four))(st)) &
(five(st)     ===> ((a#five)/\six)(st)) &
(six(st)      <=== (Sat(A)\/(a#six))(st)) &
(eight(st)    ===> (a#eight)(st)) &

(seven(st)  ===> seven'(st)) &			       -- alternating fixpoints
(seven'(st) <=== (a#((Sat(A)/\seven)\/seven'))(st)) &

drawS == wtree $ fun(dark green$x,green$text$x,
		     red$x,text$x,
		     [],text[],
		     x,red$text$x)

conjects: 

Sat(A)(3) & Sat(B)(3) & SatL(B,a)(3) & SatL(B,a)(4) &

map(eval)[three,not$three,four,five,six,seven,eight] &		
   		--> [[2,4],[1,3],[4],[4],[2,3,4],[4],[1,2,3,4]]			
	
-- stateflow$seven returns [2,4] instead of [4] because seven is alternating

all(THREE)[2,4] & 		--> True   	match&narrow    
all(NOTTHREE)[1,3] &		--> True   	match&narrow + coinduction  
(THREE(st) & st `in` states ==> st = 2 | st = 4) &   
				--> True   	match&narrow + induction    
(NOTTHREE(st) & st `in` states ==> st = 1 | st = 3)  
				--> True   	match&narrow

terms:

eval$not(three)/\six 	        --> [3]					


