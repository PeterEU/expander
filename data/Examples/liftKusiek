-- elevator

specs: CTLS
preds: Pressed
constructs: start up down visit move press pressed visiting
defuncts: remove procs
fovars: dir n m set nextFloor redown reup

axioms:

  start == (up, 2, {}, {})
& states == [start]
& labels == (map($)$prodL[[press],sucprocs]) ++ [visit,move]
& atoms == map($)$prodL[[pressed, visiting],sucprocs]

& sucprocs == map(suc)$procs

& minFloor == 1
& maxFloor == 1+max$procs
& moveDown(n) == ite(n = minFloor)(minFloor, n-1)
& moveUp(n) == ite(n = maxFloor)(maxFloor, n+1)
  
-- press(n) down
& ( n >= minFloor & (n < nextFloor | (n = nextFloor & dir = down))
    & (n `NOTin` redown)
	==>
	((dir, nextFloor, redown, reup), press(n))
	-> (dir, nextFloor, n:redown, reup))

-- press(n) up
& (n <= maxFloor & (n > nextFloor | (n = nextFloor & dir = up))
    & (n `NOTin` reup)
	==>
	((dir, nextFloor, redown, reup), press(n))
	-> (dir, nextFloor, redown, n:reup))
  	
-- visit down
& (nextFloor `in` redown
	==>
	((down, nextFloor, redown, reup), visit)
	-> (down, nextFloor, redown-{nextFloor}, reup)
  )

-- visit up
& (nextFloor `in` reup
	==>
	((up, nextFloor, redown, reup), visit)
	-> (up, nextFloor, redown, reup-{nextFloor})
  )

-- move down (turn)
& (redown = {}
	==>
	((down, nextFloor, redown, reup), move)
	-> (up, moveUp(nextFloor), redown, reup)
  )
  
-- move up (turn)
& (reup = {}
	==>
	((up, nextFloor, redown, reup), move)
	-> (down, moveDown(nextFloor), redown, reup)
  )

-- move down
& (nextFloor `NOTin` redown & redown =/= {}
	==>
	((down, nextFloor, redown, reup), move)
	-> (down, moveDown(nextFloor), redown, reup)
  )
  
-- move up
& (nextFloor `NOTin` reup & reup =/= {}
	==>
	((up, nextFloor, redown, reup), move)
	-> (up, moveUp(nextFloor), redown, reup)
  )

-- atoms
& (Pressed(x,(dir,nextFloor,redown,reup)) <==> x `in` reup | x `in` redown)

& pressed$x -> branch$filter(rel(st, Pressed(x, st)))$states
& visiting$x -> AG $ pressed(x) `then` EG$not(pressed$x)

conjects:
  start `sats` EX$Pressed$1
& start `sats` and$map(visiting)$sucprocs