-- list

preds:      P any zipAny sorted NOTsorted part >> ~
copreds:    all zipAll
defuncts:   F bag map flatten ext scan zip zipWith evens odds mergesort split 	
	    merge isort insert splitAt
fovars:     x y z xs ys s s' s1 s2 z1 z2 p
hovars:     F P

axioms:

  x:s >> s
& (s >> s' <=== s >> s1 & s1 >> s')

& (s ~ s' <=== bag(s) = bag(s'))

-- & bag(x:s) = x^bag(s)
-- & bag(s++s') = bag(s)^bag(s')

& map(F)[] = []
& map(F)(x:s) = F(x):map(F)(s)

& flatten[] == []
& flatten(s:p) == s++flatten(p)

& ext(F)(s) = flatten(map(F)(s))

& scan(F)(x)[] = [x]
& scan(F)(x)(y:s) = x:scan(F)(F(x,y))(s)

& zip[][] = []
& zip(x:s)(y:s') = (x,y):zip(s)(s')
& zipWith(F)[][] = []
& zipWith(F)(x:s)(y:s') = F(x,y):zipWith(F)(s)(s')

& (any(P)(x:s) <=== P(x) | any(P)(s))
& (all(P)(x:s) ===> P(x) & all(P)(s))
& (zipAny(P)(x:s)(y:s') <=== P(x,y) | zipAny(P)(s)(s'))
& (zipAll(P)(x:s)(y:s') ===> P(x,y) & zipAll(P)(s)(s'))

& part([x],[[x]])
& (part(x:y:s,[x]:p) <=== part(y:s,p))
& (part(x:y:s,(x:s'):p) <=== part(y:s,s':p))

& evens[] = []
& evens(x:s) = x:odds(s)
& odds[] = []
& odds(x:s) = evens(s)

& mergesort[] = []
& mergesort[x] = [x]
& (mergesort(x:y:s) = merge(mergesort(x:s1),mergesort(y:s2)) 
   <=== split(s) = (s1,s2))

& split[] = ([],[])
& split[x] = ([x],[])
& (split(x:(y:s)) = (x:s1,y:s2) <=== split(s) = (s1,s2))

& (merge(x:s,y:s') = x:merge(s,y:s') <=== x <= y)
& (merge(x:s,y:s') = y:merge(x:s,s') <=== x > y)
& merge([],s) = s
& merge(s,[]) = s

& isort[] = []
& isort[x] = [x]
& isort(x:s) = insert(x,isort(s))

& insert(x,[]) = [x]
& (insert(x,y:s) = x:y:s <=== x <= y)
& (insert(x,y:s) = y:insert(x,s) <=== x > y)

& sorted([])
& sorted([x])
& (sorted(x:y:s) <=== x <= y & sorted(y:s))

& splitAt(0)(s)         = ([],s)
& splitAt(suc(n))[]     = ([],[])
& (splitAt(suc(n))(x:s) = (x:s1,s2) <=== splitAt(n)(s) = (s1,s2))

& x:s>>s
& (s >> s' <=== s >> s1 & s1 >> s')

theorems:

  (sorted(s) & sorted(s') ===> sorted(merge(s,s')))
& (s ~ s1++s2 ===> s ~ merge(s1,s2))
& (split(s) = (s1,s2) ===> s ~ s1++s2)

& (s ~ s1++s2 & x:s1 ~ z3 & y:s2 ~ z4 ===> x:y:s ~ z3++z4)
& (sorted(s) ===> sorted(insert(x,s)))
& (s ~ x:s' ===> s ~ insert(x,s'))

& s++s' ~ merge(s,s')
& (NOTsorted(s) <=== Not(sorted$s))

& (sorted(x:s) ===> sorted(s))
& (sorted(x:s) & sorted(y:s') & x <= y & sorted(s1) & s1~(s++y:s') 
               ===> sorted(x:s1))

& (x > y ===> y <= x)
& y:x:s++s' ~ x:s++y:s'
& s'++x:s ~ x:s++s'

conjects:

(part(s,p) ==> flatten(p) = s)		        &  -- pafl1/2
(mergesort(s) = s' ==> sorted(s') & s ~ s')     &  -- mergesort
(merge(s1,s2) = s & sorted(s1) & sorted(s2)
               ==> sorted(s) & s ~ s1++s2)      &
(isort(s) = s' ==> sorted(s'))			&
(isort(s) = s' ==> s ~ s')			&
(map(F)(s) = s' ==> lg(s) = lg(s'))		&
zip(evens(s),odds(s)) = s			&

-- prem subsumes conc:
All x s z:
 (sorted(x:s) & All s': (NOTsorted(s') | x:s = s')
   ==> NOTsorted(z++[x]) | x:s = z++[x])	&

splitAt(3)[5..12] = s

terms: 

flatten([[1,2,3],[5,6,7,8],[1,2,3]])	<+>
merge([1,3,5],[2,4,6,8])		

