-- trans0

specs:		modal
constructs:	a b c is less
defuncts:       drawI drawL drawC drawS reg
fovars:     	st k n

axioms:     

  states == [0,22] 
& atoms == map($)$prodL[[is,less],[1,2,4,14]]
& reg == star$plus(a)+plus(b*c)
		 
& (st < 6 ==> st -> st+1<+>ite(st`mod`2 = 0,st,()))
& 6 -> branch$[1..5]++[7..10]	  
& 7 -> 14 
& 22 -> 33<+>44
& 44 -> ()

& is$st -> st
& less$st -> branch$filter(<st)$states

-- widget interpreters
 
& drawI == wtree $ fun(st,ite(st`in`states,
			      color(index(st,states),length$states)$circ$11,
			      frame$blue$text$st))

& drawL == wtree (1,fun((eps,k,n),text$eps,
                        (st,k,n),ite(Int$st,
				     color(k,n)$circ$11,
				     frame$blue$text$st)))

& drawC == wtree $ fun(eps,gif(cat,11,11),x,text$x) 

& drawS == wtree $ fun(sat$st,frame$text$st,st,text$x)

conjects:  

  (=14)$3		--> False
& AG(<14)$9		--> True
& all(EX(=4))[3,4,6]	--> True

terms:   

    eval(is$4)		--> [4]
<+> eval(EX$is$4)	--> [3,4,6]
<+> eval(EF$is$4)	--> [4,0,1,2,3,5,6]
<+> eval(EF$less$4)	--> [0..6]	
<+> eval(AF$less$4)	--> [0..3]	
<+> eval(EG$less$4)	--> [0..2]	
<+> eval(AG$less$4)	--> []
<+> eval(AG$less$14)	--> [8..10]

<+> eval $ is(4) `then` EF(less$2)	--> [0..10,14,22,33,44]
<+> eval $ is(4) `then` EF(less$1)	--> [0..3,5..10,14,22,33,44]
<+> eval $ AG $ is(4) `then` EF(less$1)	--> [7..10,14,22,33,44]
<+> trans(6) `meet` eval(less$2)	--> [1]

<+> auto$reg  	--> non-deterministic acceptor of (a^++(bc)^+)* 
<+> pauto$reg	--> deterministic acceptor of (a^++(bc)^+)*   (see below)
