-- mutex2

specs:   	modal
constructs:	safe
defuncts:       start searchP filterP maxwait updAll enter decrWait updCrit
preds:		anyP allP Safe Reachable

-- procs = indices$st, st = [x0,...,x(noProcs-1)]
-- i = -1  ==> i is in the critical section
-- xi = 0  ==> i is idle
-- xi > 0  ==>  xi is ticket of process i 

axioms:

(anyP(P)$st <==> any(P.(st!!))$procs) &	  

(allP(P)$st <==> all(P.(st!!))$procs) &	  

searchP(P)$st == search(P.(st!!))$procs &

filterP(P)$st == filter(P.(st!!))$procs &

maxwait$st == max$0:filter(>0)$st &

updAll(st)(i)$x == map(flip(upd$st)$x)$filterP(=i)$st &

enter(st) == upd(st)(searchP(=1)$st)$(-1) &

decrWait == map$fun(x,ite(x>0,x-1,x)) &

updCrit(st) == upd(st)$searchP(<0)$st &

start == replicate(noProcs)$0 &                 -- = take(noProcs)$mu s.(0:s)

states == [start] &

-- state transitions
	 
(maxwait$st = i & i < noProcs
    ==> st -> branch$updAll(st)(0)$i+1) &	-- some idle waits	
	 
(anyP(>0)$st & allP(>=0)$st 
    ==> st -> decrWait$enter$st) &              -- first wait enters 

(anyP(<0)$st ==> st -> updCrit(st)$0) &		-- first crit leaves	

-- 2 processes yield 9 states
-- 3 processes yield 31 states

atoms == [safe] &

(Safe$st <==> length$filterP(<0)$st <= 1) &

safe -> valid$Safe &

(Reachable$st <=== all(=0)$st) &
(Reachable$upd(st)(x)$i+1
   <=== Reachable$st & maxwait$st = i & i < noProcs & x `in` filterP(=0)$st) & 
(Reachable$decrWait$enter$st 
   <=== Reachable$st & anyP(>0)$st & allP(>=0)$st) &
(Reachable$updCrit(st)$0
   <=== Reachable$st & anyP(>0)$st & allP(>=0)$st) 

conjects:

EX(true)$start & 		--> True        1 simplification steps
states = eval$EX$true & 	--> True
AG(Safe)$start &	        --> True	coinduction + narrow match
(Reachable$st ==> Safe$st)	--> True ?	induction

terms:

eval$EX$true <+>	--> states 
eval$AG$safe		--> states