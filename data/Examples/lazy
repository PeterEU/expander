-- lazy 

specs:      bool
constructs: leaf #
defuncts:   is_even mergesortL splitL mergeL mergesort split merge
	    mergesortF splitF mergeF replaceL replace foldRepL foldRep 
            palL pal palF reveqL reveq reveqI reveqF sortTL sortT sortTI
	    leavesRepL leavesRep leavesRepI foo goo nats nats' fibs fibs'  
	    RequestsL ClientL Requests Client CSI || tree1 tree2 tree3
preds:      even odd 
fovars:     t u r a b requests acc t1 t2 u1 u2 s1 s2 ls ls1 ls2 pair
hovars:     f g client

axioms:

(even$0 <==> True) &
(even$suc$x <==> odd$x) &
(odd$x <==> Not(even$x)) &

is_even == fun(x||even$x,true,x||odd$x,false) &

-- MERGESORT

(mergesortL(x:y:s) = mergeL(mergesortL$x:s1)$mergesortL$y:s2
   		     <=== splitL$s = (s1,s2)) & 
mergesortL[x] = [x] &mergesortL[]  = [] &
   
(splitL$x:y:s = (x:s1,y:s2) <=== splitL$s = (s1,s2)) &
splitL[x] = ([x],[]) &splitL[]  = ([],[]) &

(mergeL(x:s,y:s') = x:mergeL(s,y:s') <=== x <= y) &
(mergeL(x:s,y:s') = y:mergeL(x:s,s') <=== x > y) &
mergeL([],s) = s &
mergeL(s,[]) = s &

(split$s = (s1,s2) 
             ==> mergesort$x:y:s == merge(mergesort$x:s1,mergesort$y:s2)) &
mergesort(s) == s &

(split$s = (s1,s2) ==> split$x:y:s == (x:s1,y:s2)) &
split$s == (s,[]) &

(x <= y ==> merge(x:s,y:s') == x:merge(s,y:s')) &
merge(x:s,y:s') == y:merge(x:s,s') &
merge([],s)     == s &
merge(s,[])     == s &

mergesortF(x:y:s) == fun((s1,s2),mergeF(mergesortF$x:s1)$mergesortF$y:s2)
			$splitF$s &
mergesortF[x] == [x] &
mergesortF[]  == [] &

splitF(x:y:s) == fun((s1,s2),(x:s1,y:s2))$splitF$s &
(length(s) <= 1 ==> splitF(s) == (s,[])) &

mergeF(x:s)$y:s' == ite(x<=y,x:mergeF(s)$y:s',y:mergeF(x:s)$s') &
mergeF[]$s       == s &
mergeF(s)[]      == s &

-- PALINDROMES

(palL$s = b <=== reveqL(s)$r = (r,b)) &  
					
reveqL[]$s        = ([],true) &         
(reveqL(x:s)$y:s' = (r++[x],eq(x,y)`and`b) <=== reveqL(s)$s' = (r,b)) &

pal$s == get1$mu r b.reveq(s)(r) &           -- reveq(s)$s' = (reverse$s,s=s')

reveq[]$s == ([],true) &
reveq(x:s)$s' 
 == fun(pair,(get0(pair)++[x],eq(x,head$s')`and`get1$pair))$reveq(s)$tail$s' &

-- (reveq(s)$tail$s' = pair 
--       ==> reveq(x:s)$s' == (get0(pair)++[x],eq(x,head$s')`and`get1$pair)) &
-- slow

-- reveq(x:s)$s' == fun((r,b),(r++[x],eq(x,head$s')`and`b))$reveq(s)$tail$s' &
-- terminates incorrectly

palI$s == get1$mu r b.reveqI(s)(r)[] & 
			         -- revEqI(s)(s')$acc = (reverse(s)++acc,s=s')

reveqI[](s)$acc == (acc,true) &
reveqI(x:s)(s')$acc == fun((r,b),(r,eq(x,head$s')`and`b))
                       $reveqI(s)(tail$s')$x:acc &
-- (reveqI(s)(tail$s')$x:acc = (r,b) 
--	            ==> reveqI(x:s)(s')$acc == (r,eq(x,head$s')`and`b)) &
-- slow

(reveqF$s = (r,f) ==> palF$s == f$r) &

reveqF[] == ([],fun(s,true)) &
reveqF$x:s == (get0(reveqF$s)++[x],fun(y:s',eq(x,y)`and`get1(reveqF$s)$s')) &

-- BINARY TREES

tree1 == leaf(3)#(leaf(2)#leaf(6)) &

tree2 == (leaf(9)#leaf(3))#leaf(2) &

tree3 == (leaf(9)#leaf(3))#(leaf(2)#leaf(6)) &

(replaceL(f)$t = u <=== foldRepL(f)(t)$x = (x,u)) &

foldRepL(f)(leaf$x)$y  = (x,leaf$y) &
(foldRepL(f)(t1#t2)$x  = (f(y,z),u1#u2) <=== foldRepL(f)(t1)$x = (y,u1) & 
					     foldRepL(f)(t2)$x = (z,u2)) &

replace(f)$t == get1$mu x u.foldRep(f)(t)(x) &

foldRep(f)(leaf$x)$y == (x,leaf(y)) &
(foldRep(f)(t1)$x = (y,u1) & foldRep(f)(t2)$x = (z,u2) 
		     ==> foldRep(f)(t1#t2)$x == (f(y,z),u1#u2)) &

-- TREE SORTING

(sortTL$t = u <=== leavesRepL(t)(sort$ls) = (ls,u,s)) &

(leavesRepL(leaf$x)$ls = ([x],leaf$y,s) <=== ls = y:s) &
(leavesRepL(t1#t2)$ls  = (ls1++ls2,u1#u2,s2) 
      			 <=== leavesRepL(t1)$ls = (ls1,u1,s1) & 
			      leavesRepL(t2)$s1 = (ls2,u2,s2)) &

sortT$t == get1$mu ls u s.leavesRep(t)(sort$ls) &

leavesRep(leaf$x)$ls == ([x],leaf$head$ls,tail$ls) &
(leavesRep(t1)$ls = (ls1,u1,s1) & leavesRep(t2)$s1 = (ls2,u2,s2)
   		==> leavesRep(t1#t2)$ls == (ls1++ls2,u1#u2,s2)) &

sortTI$t == get1$mu ls u s.leavesRepI(t)(sort$ls)[] &

leavesRepI(leaf$x)(ls)$acc == (x:acc,leaf$head$ls,tail$ls) &
(leavesRepI(t1)(ls)$acc = (ls1,u1,s1) & leavesRepI(t2)(s1)$ls1 = (ls2,u2,s2)
                ==> leavesRepI(t1#t2)(ls)$acc == (ls2,u1#u2,s2)) &
	     
-- INFINITE OBJECTS

nats  == 0:map(+1)$nats &

nats' == mu s.(0:map(+1)$s) &
	     
natsf == mu f.fun(n,n:f$n+1) &		   -- nats = natsf$0

fibs  == 1:1:zipWith(+)(fibs)$tail$fibs &  -- simplify breadthfirst/parallel

fibs' == mu s.(1:1:zipWith(+)(s)$tail$s) & -- simplify breadthfirst/parallel

-- CLIENT-SERVER INTERACTION

RequestsL(f)(g)$a = ClientL(g)(0)$map(f)$RequestsL(f)(g)$a &

ClientL(g)(a)$s = a:ClientL(g)(g$head$s)$tail$s &

Requests(f)(g)$a == Client(g)(a)$map(f)$Requests(f)(g)$a &

Client(g)(a)$s == a:Client(g)(g$head$s)$tail$s &

CSI(f)(g)$a == get0$mu requests client.
		       (client(a)$map(f)$requests,
                        fun(a,fun(s,a:client(g$head$s)$tail$s))) &

-- LAZY MULTIPLICATION

foo(x) == ite(x=0,0,foo(x-1)*foo(x+1)) &
goo(x) == ite(x=0,0,goo(x+1)*goo(x-1))

conjects:

mergesortL[3,2,1,4] = s 		   &   -- match and narrow
replaceL(min)$tree1 = t  		   &   -- match and narrow
replaceL(+)$tree1 = t  		           &   -- match and narrow

palL[1,1] = b 				   &   -- unify and narrow, simpl
				                   -- 4 steps           (9.3.20)      
palL[1,2] = b 				   &   -- unify and narrow, simpl
				                   -- 4 steps           (9.3.20)      
palL[2,3,2] = b 			   &   -- unify and narrow, simpl
palL[2,3,1,2] = b			   &   -- unify and narrow, simpl

sortTL$tree1 = t              	           &   -- match and narrow, simpl

take(3)$RequestsL(+1)(*2)(0) = s               -- match and narrow, simpl
				  	       -- 11 steps             (18.3.20)      
terms: 

mergesort[3,2,1,4] 			       <+>
mergesortF[3,2,1,4] 			       <+>

replace(min)$tree1   		               <+> 
replace(+)$tree1   		               <+> 

pal[1,1] 			       	       <+> -- 18 steps         (18.3.20)
pal[1,2] 			       	       <+> -- 17 steps         (18.3.20)
pal[2,3,2] 			       	       <+> -- 24 steps         (18.3.20)
pal[2,3,3]                                     <+> -- 20 steps         (18.3.20)
pal[2,3,1,2]                                   <+> -- 29 steps         (18.3.20)
pal[2,3,3,2]                                   <+> -- 31 steps         (18.3.20)

palI[2,3,2] 			       	       <+> -- 19 steps         (18.3.20)
palI[2,3,1,2]                                  <+> -- 19 steps         (18.3.20)
palI[1,2,3,2,1]                                <+> -- 29 steps         (18.3.20)				
palF[2,3,2] 			       	       <+> -- 10 steps         (18.3.20)
palF[2,3,1,2] 			       	       <+> -- 9 steps          (18.3.20)
						   
sortT$tree1	       			       <+> -- 13 steps         (16.2.20)
sortT$tree2	       			       <+> -- 15 steps         (16.2.20)
sortT$tree3	       			       <+> -- 16 steps         (16.2.20)
						   
sortTI$tree1	      			       <+> -- 11 steps          (4.2.20)
sortTI$tree2	      			       <+> -- 11 steps          (4.2.20)
sortTI$tree3	      			       <+> -- 12 steps          (5.2.20)
						   
take(3)$nats			      	       <+> -- 21 steps         (1.11.17)

take(3)$nats'  			               <+> -- 22 steps         (1.11.17)

take(3)$Requests(+1)(*2)$0		       <+> --> [0,2,6]	      
						   -- 30 steps         (18.3.20)
take(4)$Requests(+1)(*2)$0		       <+> --> [0,2,6,14]      						   		   -- 47 steps         (11.3.20)
take(5)$Requests(+1)(*2)$0                     <+> --> [0,2,6,14,30]   
						   -- 66 steps         (10.2.20)
take(6)$Requests(+1)(*2)$0                     <+> --> [0,2,6,14,30,62]
						   -- 89 steps         (10.2.20)
take(3)$CSI(+1)(*2)$0                          <+> --> [0,2,6]
 						   -- 50 steps         (30.8.20)
 						   -- (all strategies)
foo(3)					       <+> --> 0		
                  -- 15 depthfirst, 19 parallel, 27 breadthfirst steps  (4.2.20)
goo(3)					           --> 0	       
  -- depthfirst is non-terminating, 19 parallel, 48 breadthfirst steps  (4.2.20)
