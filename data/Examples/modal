-- modal

defuncts: procs noProcs rel2fun states atoms labels
          `then` or and scan detScan actL parent sibling << >>
          tjoin <> >< # % tcl descendant ancestor related 
	  EF AF FE FA EU AU AG EG GE GA EW AW ER AR
          -- defined in Esolve.hs or imports of modal:
	  trans transL preds predsL value valueL out outL unfold detUnfold
          true false not /\ \/ exists forall / pi1 pi2 valL child inv ; 
	  sat satR proj njoin * select tsort 
preds:    ->  exists2 forall2 
fovars:   st st' lab labs X P Q R T

axioms:

   procs == [0..noProcs-1]     

 & rel2fun(R)(st) == (get1<=<filter((=st).get0))$R

 & (exists2(R,P) <==> any(P).rel2fun$R)
 & (forall2(R,P) <==> all(P).rel2fun$R)

-- derived modal formulas (to be evaluated with eval/evalR/evalRA/evalT)

 & P`then`Q == not(P)\/Q

 & or == foldl(\/)$false
 & and == foldl(/\)$true

 & scan$st == evalA.unfold$st
 & detScan$st == evalA.detUnfold$st

 & actL == flip$transL

 & parent == inv.child
 & sibling(labs) == child(labs);parent$labs

 & P<<R == P/\pi1$R
 & R>>P == P/\pi2$R

 & tjoin(P)(T) == select(P).njoin$T

 & labs<>P == exists(child$labs)$P
 & labs><P == exists(parent$labs)$P
 & labs#P == forall(child$labs)$P
 & labs%P == forall(parent$labs)$P

 & tcl(R) == mu X.(R\/(R;X))               -- transitive closure of R

 & descendant == tcl.child
 & ancestor == tcl.parent
 & related(labs) == ancestor(labs);sibling(labs);descendant$labs

 & EF(labs)$P == mu X.(P\/labs<>X)         -- forward finally on some path
 & FE(labs)$P == mu X.(P\/labs><X)         -- backwards finally on some path
 & AF(labs)$P == mu X.(P\/(labs#X)/\labs<>true)
					   -- forward finally on all paths 	
 & FA(labs)$P == mu X.(P\/(labs%X)/\labs><true)    
					   -- backwards finally on all paths 	
 & EG(labs)$P == nu X.(P/\(labs<>X)\/labs#false)  
					   -- forward generally on some path
 & GE(labs)$P == nu X.(P/\(labs><X)\/labs%false)  
					   -- backwards generally on some path
 & AG(labs)$P == nu X.(P/\labs#X)          -- forward generally on all paths
 & GA(labs)$P == nu X.(P/\labs%X)          -- backwards generally on all paths

 & EU(labs)(P,Q) == mu X.(Q\/P/\labs<>X)   -- until
 & AU(labs)(P,Q) == mu X.(Q\/P/\labs#X) 	    
 & EW(labs)(P,Q) == nu X.(Q\/P/\labs<>X)   -- weak until
 & AW(labs)(P,Q) == nu X.(Q\/P/\labs#X)  
 & ER(labs)(P,Q) == nu X.(Q/\P\/labs<>X)   -- release
 & AR(labs)(P,Q) == nu X.(Q/\P\/labs#X)


