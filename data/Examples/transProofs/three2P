-- three2P


Derivation of

three(st) & st `in` states ==> st = 2 | st = 4

Shifting subformulas at position [0,1] of the preceding formula leads to 

three(st) ==> (st `in` states ==> st = 2 | st = 4)

Adding

  (three0(st) ===> (st `in` states ==> st = 2 | st = 4))
& (NOTthree0(st) <=== st = 1 | st = 3)

to the axioms and applying fixpoint induction w.r.t.

  (three(st) <=== (a#(atom(A)\/three))(st))

at position [] of the preceding formula leads to 

All st:((st `in` states ==> st = 2 | st = 4) <=== (a#(atom(A)\/three0))(st))

Simplifying the preceding formula (15 steps) leads to 

Not((a#(atom(A)\/three0))(1)) & Not((a#(atom(A)\/three0))(3))

Narrowing the preceding formula (1 step) leads to 

Not(All st':((1,a) -> st' ==> (atom(A)\/three0)(st'))) & 
Not((a#(atom(A)\/three0))(3))

The axioms were MATCHED against their redices.

Simplifying the preceding formula (20 steps) leads to 

NOTthree0(1) & Not((a#(atom(A)\/three0))(3))

Narrowing the preceding formula (1 step) leads to 

(1 = 1 | 1 = 3) & Not((a#(atom(A)\/three0))(3))

The axioms were MATCHED against their redices.

Simplifying the preceding formula (1 step) leads to 

Not((a#(atom(A)\/three0))(3))

Narrowing the preceding formula (1 step) leads to 

Not(All st':((3,a) -> st' ==> (atom(A)\/three0)(st')))

The axioms were MATCHED against their redices.

Simplifying the preceding formula (19 steps) leads to 

NOTthree0(1)

Narrowing the preceding formula (1 step) leads to 

1 = 1 | 1 = 3

The axioms were MATCHED against their redices.

Simplifying the preceding formula (1 step) leads to 

True

Number of proof steps: 11