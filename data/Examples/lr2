-- LR2

constructs: S prog statems exp assign semi op cl ID NUM 
            add mul col eq dot end shift error 
defuncts:   states labels atoms sorts csets draw
fovars:     hidden

axioms:

states == [0] &
sorts == [S,prog,statems,exp,assign] &
csets == [semi,col,dot,op,cl,ID,NUM,add,mul,eq,end] &
labels == sorts++csets &

atoms == [shift,error,  S prog,					-- r0
			prog statems exp dot,			-- r1
			statems statems assign semi,		-- r2
			statems,				-- r3
			assign ID col eq exp,			-- r4
			exp exp add exp,			-- r5
			exp exp mul exp,			-- r6
			exp op exp cl,				-- r7
			exp NUM,				-- r8
			exp ID] &				-- r9

(0,prog) -> 1 & (0,statems) -> 2 & (2,ID) -> 7 & (2,NUM) -> 6 & 
(2,op) -> 5 & (2,exp) -> 3 & (2,assign) -> 4 & (3,add) -> 9 & 
(3,mul) -> 10 & (3,dot) -> 8 & (4,semi) -> 11 & (5,ID) -> 13 & 
(5,NUM) -> 6 & (5,op) -> 5 & (5,exp) -> 12 & (7,col) -> 14 & 
(9,ID) -> 13 & (9,NUM) -> 6 & (9,op) -> 5 & (9,exp) -> 15 &
(10,ID) -> 13 & (10,NUM) -> 6 & (10,op) -> 5 & (10,exp) -> 16 & 
(12,add) -> 9 & (12,mul) -> 10 & (12,cl) -> 17 & (14,eq) -> 18 & 
(15,mul) -> 10 & (18,ID) -> 13 & (18,NUM) -> 6 & (18,op) -> 5 & 
(18,exp) -> 19 & (19,add) -> 9 & (19,mul) -> 10 &

(x `in` csets ==> (statems,x) -> 0) &			  	  -- r3
(S prog,end) -> 1 & 						  -- r0
(x `in` csets-[end] ==> (error,x) -> 1) &
(x `in` [ID,NUM,op] ==> (shift,x) -> branch[2,5,9,10,18]) &
(x `in` csets-[ID,NUM,op] ==> (error,x) -> branch[2,5,9,10,18]) &
(x `in` [add,mul,dot] ==> (shift,x) -> 3) &
(x `in` csets-[add,mul,dot] ==> (error,x) -> 3) &
(shift,semi) -> 4 &
(x `in` csets-[semi] ==> (error,x) -> 4) &
(x `in` csets ==> (exp NUM,x) -> 6) &			  	  -- r8
(shift,col) -> 7 &
(x `in` csets-[col] ==> (exp ID,x) -> 7) &			  -- r9
(x `in` csets ==> (prog statems exp dot,x) -> 8) &		  -- r1
(x `in` csets ==> (statems statems assign semi,x) -> 11) &	  -- r2
(x `in` [add,mul,cl] ==> (shift,x) -> 12) &
(x `in` csets-[add,mul,cl] ==> (error,x) -> 12) &
(x `in` csets ==> (exp ID,x) -> 13) &			  	  -- r9
(shift,eq) -> 14 &
(x `in` csets-[eq] ==> (error,x) -> 14) &
(shift,mul) -> 15 &
(x `in` csets-[mul] ==> (exp exp add exp,x) -> 15) & 	  	  -- r5
(x `in` csets ==> (exp exp mul exp,x) -> 16) &		  	  -- r6
(x `in` csets ==> (exp op exp cl,x) -> 17) &		  	  -- r7
(shift,add) -> 19 & (shift,mul) -> 19 &
(x `in` csets-[add,mul] ==> (assign ID col eq exp,x) -> 19) & 	  -- r4

draw == fun(parseLR(hidden,x,y,z),
            shelf(3,11)[tower(22,3)$(red$text$state stack):map(text)$x,
                        tower(2,3)[red$text$syntax trees,
				   shelf(11,9,M,C)$map(frame.tree)$y],
                        tower(22,3)$(red$text$input):map(text)$z],x,tree$x)

terms:

parseLR$ID col eq NUM semi ID col eq ID add NUM semi NUM mul ID add ID dot

	


