-- MUTEX2

preds:   	Idle Wait Crit Crits Crit' live nonBlock noSeq 
		/\ \/ `then` not and or EX EF AF AG `EU`
constructs:  	idle wait crit
defuncts:   	procs start diffpairs drawK tow
fovars:		xs ys k n ats

axioms:

start == ([],[]) & 
states == [start] &
atoms == map($)$prodL[[idle,wait,crit],procs] & 

(xs,ys) -> branch$map(fun(x,(x:xs,ys)))$procs-xs-ys &      -- x waits
(xs =/= [] ==> (xs,[]) -> (init(xs),[last(xs)])) &	   -- last(xs) enters
(xs,[x]) -> (xs,[]) &					   -- x leaves

(Idle(x)(xs,ys) <==> x `in` procs-xs-ys) &
(Wait(x)(xs,ys) <==> x `in` xs) &
(Crit(x)(xs,ys) <==> x `in` ys) &

idle$x -> branch$sols$Idle$x &
wait$x -> branch$sols$Wait$x &
crit$x -> branch$sols$Crit$x &

(live$x     <==> AG $ Wait(x) `then` AF$Crit$x) &
(nonBlock$x <==> AG $ Idle(x) `then` EX$Wait$x) &
(noSeq$x    <==> AG $ EF $ Crit(x) /\
                           (Crit(x) `EU` (not(Crit$x) /\ 
                                          (Crit'(x) `EU` Crit$x)))) &

(Crit'$x <==> and(map(not.Crit)$procs-[x])) & 

(Crits <==> map(Crit)$procs) &

diffpairs == filterL(=/=)[procs,procs] &

drawK == wtree $ fun(sat((xs,ys),ats),
                     frame$shelf(3,5)[tow(wait,xs),
				      tow(crit,ys),
				      tow(satisfies,ats)]) &
tow(x,xs) == tower(111,0,L)$red(text$x):map(text)(xs)

-- draw  == wtree (fun((x,k,n),circ(11,color(k,n))),1) &
-- draw  == wtree $ fun(x,circ(11,color(index(x,states),length$states))) 
-- drawK == wtree $ fun(sat((xs,ys),ats),
--                      frame$matrix[wait$xs,crit$ys,satisfies$ats])

conjects:

start `sats` Crit$1 &						--> False
start `sats` EF$Crit$1 &				        --> True
start `sats` or$Crits &					 	--> False
start `sats` EF$or$Crits &					--> True
start `sats` EF$and$Crits &				 	--> False
start `sats` and$map(EF.Crit)$procs &				--> True
start `sats` or$map(rel((x,y),EF$Crit(x)/\Crit$y))$diffpairs &	--> False
start `sats` and$map(rel((x,y),EF$Crit(x)\/Crit$y))$diffpairs &	--> True
start `sats` and$map(live)$procs &				--> True
start `sats` and$map(nonBlock)$procs &				--> True
start `sats` and$map(noSeq)$procs &				--> True
start `sats` and$map($)$prodL[[live,nonBlock,noSeq],procs] & 	--> True

map(sols)[or$Crits,live$1,nonBlock$1,noSeq$1]

terms: 

sols$or$Crits <+>
sols$and$map(live)$procs
