-- queens

specs:       	modal
constructs:	final
preds:		Final safe queens loop rec select select'
defuncts:	procs start add shift draw drawO drawAll pic drawS
fovars:         val

axioms:

  states == [start]
& start == (procs,[]) 
& atoms == [final]

-- & (s=/=[] ==> (s,val) -> branch$map(shift$s)$filter(safe$1)$map(add$val)$s)

-- 4 queens yield 2 solutions and 15 further states
-- 5 queens yield 10 solutions and 44 further states
-- 6 queens yield 4 solutions and 149 further states
-- 7 queens yield 40 solutions and 512 further states
-- 8 queens yield 92 solutions and 1965 further states
-- 9 queens yield 352 solutions and 8042 further states
-- 10 queens yield 724 solutions and 34815 further states

& (Final(s,val) <==> null$s)

& final -> branch$filter(Final)$states

& add(val)(x) == x:val

& (safe(n)[x] <==> True)
& (safe(n)(x:y:s) <==> x =/= y+n & y =/= x+n & safe(n+1)(x:s))

& shift(s)(x:val) == (s-[x],x:val)


& draw == wtree$fun(st,ite(Final$st,pic$st,st))

& drawO == wtree$fun(st,ite(Final$st,pic$st,text$o))

& drawAll == wtree$pic

& pic(s,val) == matrix$zip(drop(length$s)$procs)$val

& drawS == wtree $ fun(sat$st,frame$text$st)

-- iterative programs

& (queens(n,val) <=== loop([1..n],[],([],val)))

& (loop(s,val,st) <=== select(s,x) & safe(1)(x:val) & loop(s-[x],x:val,st))
& (loop(s,val,st) <=== select'(s,x:s') & safe(1)(x:val) & loop(s',x:val,st)) 

& select(x:s,x)
& (select(x:s,y) <=== select(s,y))


-- recursive program

& (queens(n,val) <=== rec([1..n],val))

& rec([],[])
& (rec(x:s,y:val) <=== select'(x:s,y:s') & rec(s',val) & safe(1)(y:val))

& select'(x:s,x:s)
& (select'(x:s,y:x:s') <=== select'(s,y:s'))


conjects:

  Final$start		--> False	5 simplification steps	
			--		if procs = [0..3]
& EF(Final)$start	--> True	92 simplification steps
& AF(Final)$start	--> False    	218 simplification steps
& EG(Final)$start	--> False	9 simplification steps
& AG(Final)$start	--> False	9 simplification steps

& queens(4,val) -- derive/simplify/refute --> val=[3,1,4,2]|val=[2,4,1,3]

& queens(5,val) {- derive/simplify/refute --> 
		 	val=[4,2,5,3,1]|val=[3,5,2,4,1]|val=[5,3,1,4,2]|
		 	val=[4,1,3,5,2]|val=[5,2,4,1,3]|val=[1,4,2,5,3]|
		 	val=[2,5,3,1,4]|val=[1,3,5,2,4]|
		  	val=[3,1,4,2,5]|val=[2,4,1,3,5] -}

& select([1..4],x)

& (x=[(0,2),(1,0),(2,3),(3,1)]&[(0,1),(1,3),(2,0),(3,2)]=z) 

terms:
    
    map(pic)$filter(Final)$states

<+> eval$final

    --> [([],[2,0,3,1]),([],[1,3,0,2])] 		if procs = [0..3]

    --> [([],[3,1,4,2,0]),([],[2,4,1,3,0]),([],[4,2,0,3,1]),([],[3,0,2,4,1]),
    --   ([],[4,1,3,0,2]),([],[0,3,1,4,2]),([],[1,4,2,0,3]),([],[0,2,4,1,3]), 
    --   ([],[2,0,3,1,4]),([],[1,3,0,2,4])] 		if procs = [0..4] 
	
    --> [([],[5,3,1,6,4,2]),([],[4,1,5,2,6,3]),([],[3,6,2,5,1,4]),
    --   ([],[2,4,6,1,3,5])]				if procs = [1..6]

<+> eval$EF$final

    --> [([],[2,0,3,1]),([],[1,3,0,2]),([0,1,2,3],[]),([0,2,3],[1]),
    --   ([0,1,3],[2]),([0,2],[3,1]),([1,3],[0,2]),([2],[0,3,1]),([1],[3,0,2])]
    --							if procs = [0..3]

    --> [([],[5,3,1,6,4,2]),([],[4,1,5,2,6,3]),([],[3,6,2,5,1,4]),
    --   ([],[2,4,6,1,3,5]),([1,2,3,4,5,6],[]),([1,3,4,5,6],[2]),
    --   ([1,2,4,5,6],[3]),([1,2,3,5,6],[4]),([1,2,3,4,6],[5]),
    --   ([1,3,5,6],[4,2]),([1,2,4,5],[6,3]),([2,3,5,6],[1,4]),
    --   ([1,2,4,6],[3,5]),([1,3,5],[6,4,2]),([1,4,5],[2,6,3]),
    --   ([2,3,6],[5,1,4]),([2,4,6],[1,3,5]),([3,5],[1,6,4,2]),
    --   ([1,4],[5,2,6,3]),([3,6],[2,5,1,4]),([2,4],[6,1,3,5]),
    --   ([5],[3,1,6,4,2]),([4],[1,5,2,6,3]),([3],[6,2,5,1,4]),
    --   ([2],[4,6,1,3,5])]				if procs = [1..6]

<+> eval$AF$final

    --> [([],[2,0,3,1]),([],[1,3,0,2]),([0,2,3],[1]),([0,1,3],[2]),
    --   ([0,2],[3,1]),([1,3],[0,2]),([2],[0,3,1]),([1],[3,0,2])]									if procs = [0..3]

<+> eval$EG$final

    --> [([],[2,0,3,1]),([],[1,3,0,2])] 		if procs = [0..3]

<+> eval$AG$final

    --> [([],[2,0,3,1]),([],[1,3,0,2])] 		if procs = [0..3]

