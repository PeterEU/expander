-- reglangs

specs: 		modal
constructs: 	a b c d e h aa gg pp vv final q qa qb qab q1 q2
defuncts:       reg draw drawC
preds:          Unfold
fovars: 	e st st' w k m

axioms:

-- acceptors

states == [q] & labels == [a,b] & atoms == [final] &
{-
(q,a) -> qa     & (q,b) -> qb	& 		
(qa,a) -> q     & (qa,b) -> qab	&
(qb,a) -> qab   & (qb,b) -> q	&
(qab,a) -> qb   & (qab,b) -> qa & 
-}
(q,a) -> q      & (q,b) -> q1	& 		
(q1,a) -> q2    & (q1,b) -> q1	& 		
(q2,a) -> q1    & (q2,b) -> q1	& 		
{-
final -> q &	-- A1 acceptor of words with an even number of a's and an even 
		-- number of b's if started in q

final -> qb &   -- A2: acceptor of words with an even number of a's and an odd 
		-- number of b's if started in q
-}
final -> q1 &   -- A3: acceptor of reg$11

(Unfold(st)[]    <=== final -> st) &		
(Unfold(st)(x:w) <=== (st,x) -> st' & Unfold(st')$w) &

-- regular expressions

reg$1 == star$plus(a)+plus(b*c) & 		    --> star(a+b*c)

reg$2 == a+a*a*star(a)*b+a*b*star(b)+b &	    --> star(a)*b+a*star(b)	
 
reg$3 == a+star(a)+eps+a & 			    --> star(a) 
 
reg$4 == (a+eps)*star(a)*(eps+a) &		    --> star(a)

reg$5 == (a+eps)*star(a+eps)*(a+eps)+a+eps &        --> star(a)

reg$6 == star(a)*b*star(b+eps)*(b+eps)+star(a)*b &  --> star(a)*b*star(b)

reg$7 == d*pp+c*h*e+a*b+c+a+a*b*c*d+star(a*a+b+a*b)+mt+c*aa+b*gg+eps+
         a+a*a+vv+a*a*8+d+b &
     --> (a*a*8)+a+(c*aa)+c+d+(a*b*c*d)+(c*h*e)+(b*gg)+(d*pp)+
     --  star((a*a)+(a*b)+b)+vv

reg$8 == a+((b+eps)*star(b+eps)*a)+
         ((a+((b+eps)*star(b+eps)*a))*star(a+b+eps+(mt*star(b+eps)*a))*
          (a+b+eps+(mt*star(b+eps)*a))) &	    -- auto3
     --> star(b)*a*star(a+b)			

reg$9 == a+c+eps+((a+c+eps)*star(a+c+eps)*(a+c+eps))+
         ((b+((a+c+eps)*star(a+c+eps)*b))*star(a+b+eps+(c*star(a+c+eps)*b))*
          (c+(c*star(a+c+eps)*(a+c+eps)))) &	    -- auto4
     --> star(a+c)+(star(a+c)*b*star(a+b+(c*star(a+c)*b))*c*star(a+c))
     -- autoToReg.minimize.regToAuto --> star(a+c+b*star(a+b)*c)	

reg$10 == star(a)+star(a)*b*star(c*star(a)*b)*c*star(a) &

reg$11 == star(a)*b*star(a*(a+b)+b) &
	
-- widget interpreters

draw(m) == wtree(m)$fun((eps,k,n),text$eps,
                        (x,k,n),ite(Int$x,color(k,n)$circ$10,
				          frame$blue$text$x)) &

drawC == wtree $ fun(eps,gif(cat,16,14),x,text$x) 

conjects:

Unfold(q)[] &			--> False	-- unify & narrow
Unfold(q)[b] &			--> True	-- derive & simplify & refute
Unfold(q)[b,b] &		--> True
Unfold(q)[a,b,a,a,b,a] &	--> False
Unfold(q)[a,b,a,b,a,b,a] &	--> True	-- reglangs1
Unfold(q)[a,b,a,a,b,a,b] &	--> True
Unfold(q)[a,b,a,b,b,a,b,a] 	--> False

terms:

star(a+b*c) <+>			-- RE1

scan(q)[] <+>			--> []		
scan(q)[b] <+>	       	        --> [final]
scan(q)[b,b] <+>		--> [final]
scan(q)[a,b,a,a,b,a] <+>	--> []		
scan(q)[a,b,a,b,a,b,a] <+>	--> [final]
scan(q)[a,b,a,a,b,a,b] <+>	--> [final]	
scan(q)[a,b,a,b,b,a,b,a] <+>	--> []

detScan(q)[a,b,a,a,b,a] <+>	--> []		
detScan(q)[a,b,a,a,b,a,b] <+>	--> [final]		

unfoldBro(reg$2)[a,a,a,b] <+>   --> 1
unfoldBro(reg$2)[a,a,a,b,b] <+> --> 0

auto$reg$1 <+>			--> non-deterministic acceptor of reg$1 
pauto$reg$1 			--> deterministic acceptor of reg$1   